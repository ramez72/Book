//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./UserService_types');
//HELPER FUNCTIONS AND STRUCTURES

var UserService_createUser_args = function(args) {
  this.userData = null;
  if (args) {
    if (args.userData !== undefined && args.userData !== null) {
      this.userData = new ttypes.UserData(args.userData);
    }
  }
};
UserService_createUser_args.prototype = {};
UserService_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userData = new ttypes.UserData();
        this.userData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_createUser_args');
  if (this.userData !== null && this.userData !== undefined) {
    output.writeFieldBegin('userData', Thrift.Type.STRUCT, 1);
    this.userData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_createUser_result = function(args) {
  this.success = null;
  this.excep = null;
  if (args instanceof ttypes.ServiceException) {
    this.excep = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserProfile(args.success);
    }
    if (args.excep !== undefined && args.excep !== null) {
      this.excep = args.excep;
    }
  }
};
UserService_createUser_result.prototype = {};
UserService_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excep = new ttypes.ServiceException();
        this.excep.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.excep !== null && this.excep !== undefined) {
    output.writeFieldBegin('excep', Thrift.Type.STRUCT, 1);
    this.excep.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_checkUsernameExist_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
  }
};
UserService_checkUsernameExist_args.prototype = {};
UserService_checkUsernameExist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_checkUsernameExist_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_checkUsernameExist_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_checkUsernameExist_result = function(args) {
  this.success = null;
  this.excep = null;
  if (args instanceof ttypes.ServiceException) {
    this.excep = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.excep !== undefined && args.excep !== null) {
      this.excep = args.excep;
    }
  }
};
UserService_checkUsernameExist_result.prototype = {};
UserService_checkUsernameExist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excep = new ttypes.ServiceException();
        this.excep.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_checkUsernameExist_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_checkUsernameExist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.excep !== null && this.excep !== undefined) {
    output.writeFieldBegin('excep', Thrift.Type.STRUCT, 1);
    this.excep.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_validateToken_args = function(args) {
  this.username = null;
  this.token = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
UserService_validateToken_args.prototype = {};
UserService_validateToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_validateToken_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_validateToken_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_validateToken_result = function(args) {
  this.success = null;
  this.excep = null;
  if (args instanceof ttypes.ServiceException) {
    this.excep = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.excep !== undefined && args.excep !== null) {
      this.excep = args.excep;
    }
  }
};
UserService_validateToken_result.prototype = {};
UserService_validateToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excep = new ttypes.ServiceException();
        this.excep.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_validateToken_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_validateToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.excep !== null && this.excep !== undefined) {
    output.writeFieldBegin('excep', Thrift.Type.STRUCT, 1);
    this.excep.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getProfile_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
  }
};
UserService_getProfile_args.prototype = {};
UserService_getProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getProfile_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getProfile_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getProfile_result = function(args) {
  this.success = null;
  this.excep = null;
  if (args instanceof ttypes.ServiceException) {
    this.excep = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserProfile(args.success);
    }
    if (args.excep !== undefined && args.excep !== null) {
      this.excep = args.excep;
    }
  }
};
UserService_getProfile_result.prototype = {};
UserService_getProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excep = new ttypes.ServiceException();
        this.excep.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getProfile_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.excep !== null && this.excep !== undefined) {
    output.writeFieldBegin('excep', Thrift.Type.STRUCT, 1);
    this.excep.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_validateCredential_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
UserService_validateCredential_args.prototype = {};
UserService_validateCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_validateCredential_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_validateCredential_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_validateCredential_result = function(args) {
  this.success = null;
  this.excep = null;
  if (args instanceof ttypes.ServiceException) {
    this.excep = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.excep !== undefined && args.excep !== null) {
      this.excep = args.excep;
    }
  }
};
UserService_validateCredential_result.prototype = {};
UserService_validateCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excep = new ttypes.ServiceException();
        this.excep.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_validateCredential_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_validateCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.excep !== null && this.excep !== undefined) {
    output.writeFieldBegin('excep', Thrift.Type.STRUCT, 1);
    this.excep.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_generateToken_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userid is unset!');
    }
  }
};
UserService_generateToken_args.prototype = {};
UserService_generateToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_generateToken_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_generateToken_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 1);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_generateToken_result = function(args) {
  this.success = null;
  this.excep = null;
  if (args instanceof ttypes.ServiceException) {
    this.excep = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.excep !== undefined && args.excep !== null) {
      this.excep = args.excep;
    }
  }
};
UserService_generateToken_result.prototype = {};
UserService_generateToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excep = new ttypes.ServiceException();
        this.excep.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_generateToken_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_generateToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.excep !== null && this.excep !== undefined) {
    output.writeFieldBegin('excep', Thrift.Type.STRUCT, 1);
    this.excep.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.seqid = function() { return this._seqid; };
UserServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
UserServiceClient.prototype.createUser = function(userData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUser(userData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUser(userData);
  }
};

UserServiceClient.prototype.send_createUser = function(userData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userData: userData
  };
  var args = new UserService_createUser_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.excep) {
    return callback(result.excep);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUser failed: unknown result');
};
UserServiceClient.prototype.checkUsernameExist = function(username, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkUsernameExist(username);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkUsernameExist(username);
  }
};

UserServiceClient.prototype.send_checkUsernameExist = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkUsernameExist', Thrift.MessageType.CALL, this.seqid());
  var params = {
    username: username
  };
  var args = new UserService_checkUsernameExist_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_checkUsernameExist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_checkUsernameExist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.excep) {
    return callback(result.excep);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkUsernameExist failed: unknown result');
};
UserServiceClient.prototype.validateToken = function(username, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validateToken(username, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validateToken(username, token);
  }
};

UserServiceClient.prototype.send_validateToken = function(username, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validateToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    username: username,
    token: token
  };
  var args = new UserService_validateToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_validateToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_validateToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.excep) {
    return callback(result.excep);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validateToken failed: unknown result');
};
UserServiceClient.prototype.getProfile = function(username, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfile(username);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfile(username);
  }
};

UserServiceClient.prototype.send_getProfile = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfile', Thrift.MessageType.CALL, this.seqid());
  var params = {
    username: username
  };
  var args = new UserService_getProfile_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.excep) {
    return callback(result.excep);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfile failed: unknown result');
};
UserServiceClient.prototype.validateCredential = function(username, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validateCredential(username, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validateCredential(username, password);
  }
};

UserServiceClient.prototype.send_validateCredential = function(username, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validateCredential', Thrift.MessageType.CALL, this.seqid());
  var params = {
    username: username,
    password: password
  };
  var args = new UserService_validateCredential_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_validateCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_validateCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.excep) {
    return callback(result.excep);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validateCredential failed: unknown result');
};
UserServiceClient.prototype.generateToken = function(userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generateToken(userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generateToken(userid);
  }
};

UserServiceClient.prototype.send_generateToken = function(userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('generateToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userid: userid
  };
  var args = new UserService_generateToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_generateToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_generateToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.excep) {
    return callback(result.excep);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generateToken failed: unknown result');
};
var UserServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
UserServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
UserServiceProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new UserService_createUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUser.length === 1) {
    Q.fcall(this._handler.createUser.bind(this._handler), args.userData)
      .then(function(result) {
        var result_obj = new UserService_createUser_result({success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceException) {
          result = new UserService_createUser_result(err);
          output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUser(args.userData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new UserService_createUser_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
UserServiceProcessor.prototype.process_checkUsernameExist = function(seqid, input, output) {
  var args = new UserService_checkUsernameExist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkUsernameExist.length === 1) {
    Q.fcall(this._handler.checkUsernameExist.bind(this._handler), args.username)
      .then(function(result) {
        var result_obj = new UserService_checkUsernameExist_result({success: result});
        output.writeMessageBegin("checkUsernameExist", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceException) {
          result = new UserService_checkUsernameExist_result(err);
          output.writeMessageBegin("checkUsernameExist", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUsernameExist", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkUsernameExist(args.username, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new UserService_checkUsernameExist_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkUsernameExist", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkUsernameExist", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
UserServiceProcessor.prototype.process_validateToken = function(seqid, input, output) {
  var args = new UserService_validateToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validateToken.length === 2) {
    Q.fcall(this._handler.validateToken.bind(this._handler), args.username, args.token)
      .then(function(result) {
        var result_obj = new UserService_validateToken_result({success: result});
        output.writeMessageBegin("validateToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceException) {
          result = new UserService_validateToken_result(err);
          output.writeMessageBegin("validateToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("validateToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validateToken(args.username, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new UserService_validateToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("validateToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
UserServiceProcessor.prototype.process_getProfile = function(seqid, input, output) {
  var args = new UserService_getProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfile.length === 1) {
    Q.fcall(this._handler.getProfile.bind(this._handler), args.username)
      .then(function(result) {
        var result_obj = new UserService_getProfile_result({success: result});
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceException) {
          result = new UserService_getProfile_result(err);
          output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfile(args.username, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new UserService_getProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
UserServiceProcessor.prototype.process_validateCredential = function(seqid, input, output) {
  var args = new UserService_validateCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validateCredential.length === 2) {
    Q.fcall(this._handler.validateCredential.bind(this._handler), args.username, args.password)
      .then(function(result) {
        var result_obj = new UserService_validateCredential_result({success: result});
        output.writeMessageBegin("validateCredential", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceException) {
          result = new UserService_validateCredential_result(err);
          output.writeMessageBegin("validateCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("validateCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validateCredential(args.username, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new UserService_validateCredential_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("validateCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
UserServiceProcessor.prototype.process_generateToken = function(seqid, input, output) {
  var args = new UserService_generateToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generateToken.length === 1) {
    Q.fcall(this._handler.generateToken.bind(this._handler), args.userid)
      .then(function(result) {
        var result_obj = new UserService_generateToken_result({success: result});
        output.writeMessageBegin("generateToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceException) {
          result = new UserService_generateToken_result(err);
          output.writeMessageBegin("generateToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("generateToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.generateToken(args.userid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new UserService_generateToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("generateToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generateToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
